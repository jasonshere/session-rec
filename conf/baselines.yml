type: single # single|window|opt
key: baselines #added to the csv names
evaluation: evaluation # evaluation_user_based
data:
  name: diginetica #added in the end of the csv names
  folder: data/diginetica/prepared/
  prefix: train-item-views
  type: csv # hdf|csv(default)

results:
  folder: results/session-based/diginetica/

metrics:
- class: accuracy_multiple.MAP
  length: [10,20]
- class: accuracy_multiple.Precision
  length: [10,20]
- class: accuracy_multiple.Recall
  length: [10,20]
- class: accuracy.HitRate
  length: [10,20]
- class: accuracy.MRR
  length: [10,20]
- class: coverage.Coverage
  length: [10,20]
- class: popularity.Popularity
  length: [10,20]

algorithms:
# non-neural models
- class: baselines.pop.Pop
  params: {  }
  key: pop
# - class: baselines.usr.USequentialRules
#   params: { steps: 12, weighting: quadratic, boost_own_sessions: 3.1 , reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 2, weight_base: 5, weight_IRec: 3}
#   key: sr_BR
# - class: knn.vsknn.VMContextKNN
#   params: { k: 50, sample_size: 500, weighting: log , weighting_score: linear, idf_weighting: 10  }
#   key: vsknn
# - class: knn.uvsknn.UVMContextKNN
#   params: { k: 1500, sample_size: 1000, weighting: log , weighting_score: linear, idf_weighting: 1, extend_session_length: 8, boost_own_sessions: 0.1, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 4, weight_base: 8, weight_IRec: 1, weight_SSim: 1 }
#   key: vsknn_EBR
# - class: knn.stan.STAN
#   params: { k: 1500, sample_size: 2500, lambda_spw: 0.905 , lambda_snh: 100, lambda_inh: 0.4525 }
#   key: stan
# - class: knn.ustan.USTAN
#   params: { k: 200, sample_size: 1000, lambda_spw: 0.905 , lambda_snh: 100, lambda_inh: 0.905 , extend_session_length: 2, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 9, weight_base: 10, weight_IRec: 3, weight_SSim: 2 }
#   key: stan_ER
# - class: knn.vstan.VSKNN_STAN
#   params: {k: 200, sample_size: 5000 , similarity: 'vec', lambda_spw: 1.81, lambda_snh: 40, lambda_inh: 0.905, lambda_ipw: 0.905, lambda_idf: False }
#   key: vstan
# - class: knn.uvstan.U_VSKNN_STAN
#   params: {k: 2000, sample_size: 10000 , similarity: 'cosine', lambda_spw: 0.905, lambda_snh: 80, lambda_inh: 1.81, lambda_ipw: 3.62, lambda_idf: 5, extend_session_length: 5, boost_own_sessions: 0.1, reminders: True, remind_strategy: 'hybrid', remind_sessions_num: 2, weight_base: 6, weight_IRec: 2, weight_SSim: 0}
#   key: vstan_EBR
# - class: baselines.ar.AssociationRules
#   params: {}
#   key: ar
# - class: knn.sknn.ContextKNN
#   params: { k: 50, sample_size: 5000, similarity: cosine }
#   key: sknn
# - class: ct.ct.ContextTree
#   params: {}
#   key: ct-pre